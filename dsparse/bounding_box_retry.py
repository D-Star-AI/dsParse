import vertexai
import vertexai.generative_models as gm
from PIL import Image, ImageDraw
import json

SYSTEM_MESSAGE = """
Your task is to improve the accuracy of the bounding box shown in the image. This bounding box was generated by an AI model, and it may not accurately capture the content of the image or figure.

The bounding box shown in the image has coordinates ({ymin}, {xmin}, {ymax}, {xmax}).

Here is a description of the image or figure that the bounding box is supposed to capture:
{description}

Here is what a good bounding box should look like:
- The bounding box should capture the entire image or figure described above.
- It should capture all relevant elements of the image or figure, including legends, labels, figure and axis titles, and other important features that are necessary to understand the content.
- The bounding box should not include any unnecessary elements that are not relevant to the image or figure described above.
- If you only see what's inside the bounding box, you should be able to understand the content of the image or figure without any additional context.

Please provide a new set of coordinates for the bounding box that more accurately captures the image or figure described above. The new coordinates should be in the format [ymin, xmin, ymax, xmax].

The coordinate system works as follows:
- The origin (0, 0) is the top-left corner of the image.
- The y-axis is vertical, with increasing values going down.
- The x-axis is horizontal, with increasing values going to the right.
- The bottom-right corner of the image has coordinates (1000, 1000).
- For example, the coordinates [0, 0, 1000, 1000] would represent a bounding box that covers the entire image. The coordinates [0, 0, 500, 500] would represent a bounding box that covers the top-left quadrant of the image.

Remember, the original bounding box may not be very good, so don't be afraid to make significant changes to the coordinates to improve its accuracy. You may need to adjust the coordinates by as much as 20% (200 points) in any direction to capture the entire image or figure.

Your response should have two parts:
1. A one sentence description of the changes that need to be made to the bounding box to improve its accuracy.
2. A list of 4 integers, separated by commas, that represent the new coordinates of the bounding box. Include the opening and closing square brackets, and do not include any additional text after the closing bracket.
""".strip()


def add_box_to_image(image_path: str, bounding_box: list[int], save_path: str, color: str = "red"):
    """
    Inputs:
    - image_path: str, path to the image file
    - bounding_box: list[int], list of integers representing the bounding box coordinates in the format [ymin, xmin, ymax, xmax]
    - save_path: str, path to save the image with the bounding box drawn on it
    """

    with Image.open(image_path) as img:
        width, height = img.size
        print(f"Original image size: {width}x{height}")

        # Calculate actual pixel coordinates
        ymin_scaled, xmin_scaled, ymax_scaled, xmax_scaled = bounding_box
        actual_xmin = int(xmin_scaled / 1000 * width)
        actual_ymin = int(ymin_scaled / 1000 * height)
        actual_xmax = int(xmax_scaled / 1000 * width)
        actual_ymax = int(ymax_scaled / 1000 * height)

        # Draw bounding box on the image
        draw = ImageDraw.Draw(img)
        draw.rectangle([actual_xmin, actual_ymin, actual_xmax, actual_ymax], outline=color, width=3)

        # Save the image with the bounding box
        img.save(save_path)

def make_llm_call_gemini(image_path: str, model: str = "gemini-1.5-pro-002", max_tokens: int = 4000) -> str:
    project_id = "brilliant-era-430616-a1"
    vertexai.init(project=project_id, location="us-central1")
    model = gm.GenerativeModel(model)
    generation_config = gm.GenerationConfig(temperature=0.0, max_output_tokens=max_tokens)
    response = model.generate_content(
        [
            gm.Part.from_image(gm.Image.load_from_file(image_path)),
            SYSTEM_MESSAGE,
        ],
        generation_config=generation_config,
    )
    return response.text


page_number = 24
image_path = f"/Users/zach/Code/pdf_to_images/mck_energy/page_{page_number}.png"
#bounding_box = [298, 330, 540, 925] # [ymin, xmin, ymax, xmax]
bounding_box = [315, 432, 577, 703]

image_path_w_bbox = f"/Users/zach/Code/pdf_to_images/mck_energy/page_{page_number}_with_box.png"
add_box_to_image(image_path, bounding_box, image_path_w_bbox, color="red")

llm_response = make_llm_call_gemini(image_path_w_bbox)
print(llm_response)

# split the response into the CoT part and the new bounding box coordinates
llm_response = llm_response.strip()
llm_response = llm_response.split("\n")[-1]

# parse the response to get the new bounding box coordinates - just load as json
new_bounding_box = json.loads(llm_response.strip())
print(new_bounding_box)

# add a new bounding box to the image
add_box_to_image(image_path_w_bbox, new_bounding_box, image_path_w_bbox, color="green")